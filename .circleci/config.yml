version: 2.1

orbs:
  sfdx: circleci/salesforce-sfdx@2.2.0

parameters:
  action:
    type: enum
    enum: [build, limits, test-sfdx-install]
    default: build

jobs:
  set-up-enviroment:
    executor: sfdx/default
    steps:
      - checkout
      - sfdx/install

      # install / restore node modules - Start          		
      - restore_cache:
          key: -v1-node_modules

      - run:
          command: >
            npm install sfdx-node
          name: install sfdx-node

      # install / restore node modules - End		
      - save_cache:
          key: -v1-node_modules
          paths:
            - "node_modules"
      - run:
          command: |
            mkdir tmp
            mkdir tmp/artifacts
            mkdir cache
          name: create folder for artifacts 

      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: ./
          # Must be relative path from root
          paths:
            - ./

  create-cache-checksum:
    executor: sfdx/default
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ./
          
      - run:
          command: >
            node ./scripts/deployment/node/writeChecksumFile.js
          name: writing file for checksum

      - persist_to_workspace:
          root: ./
          paths:
            - ./
            
  create-scratch-org:
    executor: sfdx/default
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ./

      - sfdx/install

  # create / restore credential file
    # chaching - start
      - restore_cache:
          key: -v4-credentials-{{ checksum "checksum_24h.cache" }}

      - sfdx/auth:
          defaultusername: david@mcga.de

      - run:
          command: >
            scripts/deployment/createNewScratchOrg.sh tempScratchOrg ./cache/org.credentials
          name: create scratch org

      - save_cache:
          key: -v4-credentials-{{ checksum "checksum_24h.cache" }}
          paths:
            - "cache"
       # chaching scratch org credentials - end 
        
      - store_artifacts:
          path: tmp/artifacts/
          
          
      - run:
          command: >
            rm server.key
          name: Remove 'server.key' file
      
      - persist_to_workspace:
          root: ./
          paths:
            - ./
    

  push-code-and-run-tests:
    docker:
      #- image: cimg/node:19.1.0
      - image: salesforce/salesforcedx:7.178.0-slim
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ./
   
      # - sfdx/auth:
      #     defaultusername: david@mcga.de

      


      #- run:
      #    command: |
      #      echo "$SFDX_JWT_KEY" | base64 --decode > server.key
      #    name: Authorize Scratch org

      # - run:
      #     command: |
      #       FILEPATH="./cache/org.credentials"
      #       echo $FILEPATH

      #       USERNAME_LINE=$( cat $FILEPATH | grep "Username" )
      #       echo $USERNAME_LINE
      #       USERNAME="${USERNAME_LINE/"Username"/}"
      #       echo $USERNAME

      #       INSTANCE_URL_LINE=$( cat $FILEPATH | grep "Instance Url" )
      #       echo $INSTANCE_URL_LINE
      #       INSTANCE_URL="${INSTANCE_URL_LINE/"Instance Url"/}"
      #       echo $INSTANCE_URL

      #       ACCESS_TOKEN_LINE=$( cat $FILEPATH | grep "Access Token" )
      #       echo $ACCESS_TOKEN_LINE
      #       ACCESS_TOKEN="${ACCESS_TOKEN_LINE/"Access Token"/}"
      #       echo $ACCESS_TOKEN


      #       export SFDX_ACCESS_TOKEN=$ACCESS_TOKEN
      #       echo $SFDX_ACCESS_TOKEN

      #       ALIAS="tempScratchOrg"
      #       echo $ALIAS

      #       sfdx auth:accesstoken:store --instanceurl="$INSTANCE_URL" --setalias="$ALIAS" --setdefaultusername --noprompt
            
      #     name: Authorize Scratch org
      

      #=============================================
      # Authorize with JWT - all in on - without auth script
      #=============================================

      - run:
          command: |
            CACHED_ORG_DETAILS="./cache/org.credentials"

            INSTANCE_URL=$(scripts/deployment/readInstanceUrl.sh "$CACHED_ORG_DETAILS")
            echo Instance
            echo $INSTANCE_URL
            #https://test.salesforce.com
            echo
            USER_NAME=$(scripts/deployment/readUsername.sh "$CACHED_ORG_DETAILS")
            echo Username
            echo $USER_NAME
            echo
            
            CLIENT_ID=$SFDX_CONSUMER_KEY

            echo "$SFDX_JWT_KEY" | base64 --decode > server.key

            sfdx auth:jwt:grant --clientid $CLIENT_ID --jwtkeyfile ./server.key --username $USER_NAME --instanceurl $INSTANCE_URL --setdefaultusername

          name: authorize via auth:jwt:grant
      #=============================================
      # Authorize with JWT - all in on - call script
      #=============================================

      # - run:
      #     command: |
      #       CACHED_ORG_DETAILS="./cache/org.credentials"
      #       ORG_ALIAS="pipeline-org"
      #       echo $SFDX_JWT_KEY
      #       echo $SFDX_CONSUMER_KEY
      #       echo $CACHED_ORG_DETAILS
      #       echo $ORG_ALIAS
      #       chmod +x scripts/deployment/authorize.sh
      #       ./scripts/deployment/authorize.sh "${SFDX_JWT_KEY}" "${SFDX_CONSUMER_KEY}" "${CACHED_ORG_DETAILS}" "${ORG_ALIAS}"
      #     name: authorize via JWT

      #=============================================
      # Authorize with JWT - split steps
      #=============================================
      # - run:
      #     command: |
      #       base64 --decode $SFDX_JWT_KEY > ./server.key
      #     name: create ./server.key 
      
      # - run:
      #     command: |
      #       CACHED_ORG_DETAILS="./cache/org.credentials"
      #       ORG_ALIAS="pipeline-org"
      #       echo $SFDX_CONSUMER_KEY
      #       echo $CACHED_ORG_DETAILS
      #       echo $ORG_ALIAS
      #       chmod +x scripts/deployment/authorize.sh
      #       ./scripts/deployment/authorize.sh "${SFDX_JWT_KEY}" "${SFDX_CONSUMER_KEY}" "${CACHED_ORG_DETAILS}" "${ORG_ALIAS}"
      #     name: authorize via JWT


      #------------
      # Authorize with auth:accesstoken:store
      #------------
      # - run:
      #     command: |
      #       FILEPATH="./cache/org.credentials"
      #       ACCESSTOKEN=$(scripts/deployment/readAccessToken.sh "$FILEPATH")
      #       #echo $ACCESSTOKEN
      #       export SFDX_ACCESS_TOKEN=$ACCESSTOKEN

      #       chmod +x scripts/deployment/authorizeWithAccessToken.sh
      #       scripts/deployment/authorizeWithAccessToken.sh "./cache/org.credentials" "tempScratchOrg"
      #     name: Authorize with accesstoken


      #------------
      # Skip auth and use accesstoken as targetUsername
      #------------
      # - run:
      #     command: |
      #       FILEPATH="./cache/org.credentials"

      #       INSTANCE_URL=$(scripts/deployment/readInstanceUrl.sh "$FILEPATH")
      #       echo $INSTANCE_URL
      #       sfdx config:set instanceUrl=$INSTANCE_URL

      #       SFDX_ACCESS_TOKEN=$(scripts/deployment/readAccessToken.sh "$FILEPATH")
      #       echo $SFDX_ACCESS_TOKEN

      #       sfdx force:source:deploy --checkonly --sourcepath ./force-app/main/ --targetusername $SFDX_ACCESS_TOKEN
      #     name: Use accesstoken as username


      - run:
          command: >
            sfdx force:org:list
          name: Print Org list

      - run:
          command: >
            sfdx force:source:push --forceoverwrite --wait 60 > tmp/artifacts/DeploymentResults.txt
          name: SFDX Push Changes
          
      - run:
          command: >
            sfdx force:apex:test:run -l RunLocalTests --resultformat=human --codecoverage --wait 60 --outputdir tmp/artifacts/testResults
          name: Run APEX Tests

      - store_artifacts:
          path: tmp/artifacts/          


  authorize-scratch-org-with-jwt:
    docker:
      #- image: cimg/node:19.1.0
      - image: salesforce/salesforcedx:7.178.0-slim
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ./

      - run:
          command: |
            sfdx auth:jwt:grant --help
          name: Print auth help


# Testjobs with docker-SFDX

  test-install-sfdx-auth:
    docker:
      #- image: cimg/node:19.1.0
      - image: salesforce/salesforcedx:7.178.0-slim
    steps:
      - run:
          command: |
            node --version
          name: print node version
      - run:
          command: |
            sfdx --version
          name: print sfdx version

      - run:
          command: |
            echo "$SFDX_JWT_KEY" | base64 --decode > server.key
            sfdx auth:jwt:grant --clientid $SFDX_CONSUMER_KEY --instanceurl https://login.salesforce.com --jwtkeyfile ./server.key --setdefaultdevhubusername --username david@mcga.de --setalias devHub

            rm server.key
          name: Authorize Devhub
      - run:
          command: |
            sfdx force:org:display --targetusername  devHub --verbose
          name: Print DevHub Auth Info

      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: ./
          # Must be relative path from root
          paths:
            - ./
      # - run:
      #     command: >
      #     name: Authorize Devhub
      #      david@mcga.de

  test-install-sfdx-print:
    docker:
      - image: salesforce/salesforcedx:7.178.0-slim
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ./
      - run:
          command: >
            sfdx config:list
          name: print Config
      - run:
          command: >
            sfdx force:org:list
          name: print Org list

# -----------------------
# Utilities
# -----------------------



  print-org-status:
    executor: sfdx/default
    parameters:
      filename:
        type: string
    steps:
      - checkout

      - sfdx/install
      - sfdx/auth:
          defaultusername: david@mcga.de
      
      - run:
          command: >
            sfdx force:limits:api:display -u david@mcga.de
          name: Print org API Limits
      - run:
          command: >
            sfdx force:package:list
          name: Print packages
      - run:
          command: >
            sfdx force:package:version:list
          name: Print packages versions

  print-filesystem:
    executor: sfdx/default
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ./
      - run:
          command: |
            pwd
            ls -la
            echo "============="
            echo ""
            ls cache -la
            echo "============="
            echo ""
            ls tmp -la
          name: print Filesystem
      - run:
          command: |
            cat ./cache/org.credentials
          name: print Filesystem

# -----------------------
# Workflows
# -----------------------

workflows:
  install-sfdx:
    when:
      equal: [ test-sfdx-install, << pipeline.parameters.action >> ]
    jobs:
      - test-install-sfdx-auth
      - test-install-sfdx-print:
          requires:
            - test-install-sfdx-auth

  org-limits:
    when:
      equal: [ limits, << pipeline.parameters.action >> ]
    jobs:
      - print-org-status:
          name: Org Limits
          filename: orgLimits.txt


  deploy-and-test:
    when:
      equal: [ build, << pipeline.parameters.action >> ]
    jobs:
      - print-org-status:
          name: limitsBefore
          filename: orgLimits.txt
      - set-up-enviroment:
          requires:
            - limitsBefore
      - create-cache-checksum:
          requires:
            - set-up-enviroment
      - create-scratch-org:
          requires:
            - set-up-enviroment
            - create-cache-checksum
      - authorize-scratch-org-with-jwt:
          name: Use JWT to authorize with scratch org
          requires:
            - create-scratch-org
      - print-filesystem:
          name: FileSystem after creating scratchorg
          requires:
            - create-scratch-org
      - print-org-status:
          name: limitsAfterOrgCreation
          filename: orgLimits.txt
          requires:
            - create-scratch-org
      - push-code-and-run-tests:
          requires:
            - create-scratch-org
      - print-org-status:
          name: limitsAfter
          filename: orgLimits.txt
          requires:
            - push-code-and-run-tests
